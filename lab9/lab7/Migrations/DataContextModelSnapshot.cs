// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab7.Data;

#nullable disable

namespace lab7.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab7.Models.ATMMachine", b =>
                {
                    b.Property<int>("ATMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ATMId"));

                    b.HasKey("ATMId");

                    b.ToTable("ATMMachines");
                });

            modelBuilder.Entity("lab7.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("lab7.Models.Cardholder", b =>
                {
                    b.Property<int>("CardholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardholderId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardholderId");

                    b.ToTable("Cardholders");
                });

            modelBuilder.Entity("lab7.Models.CardholdersBanks", b =>
                {
                    b.Property<int>("CardholderBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardholderBankId"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CardholderId")
                        .HasColumnType("int");

                    b.HasKey("CardholderBankId");

                    b.HasIndex("BankId");

                    b.HasIndex("CardholderId");

                    b.ToTable("CardholdersBanks");
                });

            modelBuilder.Entity("lab7.Models.CardholdersCards", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardholderId")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CardNumber");

                    b.HasIndex("CardTypeCode1");

                    b.HasIndex("CardholderId");

                    b.HasIndex("CurrencyCode1");

                    b.ToTable("CardholdersCards");
                });

            modelBuilder.Entity("lab7.Models.FinancialTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("ATMId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ATMId1")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MerchantId1")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("ATMId1");

                    b.HasIndex("CardNumber1");

                    b.HasIndex("CurrencyCode1");

                    b.HasIndex("MerchantId1");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("lab7.Models.Merchant", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MerchantId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchantCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MerchantId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("lab7.Models.MerchantsBanks", b =>
                {
                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.HasKey("MerchantId", "BankId");

                    b.HasIndex("BankId");

                    b.ToTable("MerchantsBanks");
                });

            modelBuilder.Entity("lab7.Models.RefCardTypes", b =>
                {
                    b.Property<string>("CardTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardTypeCode");

                    b.ToTable("RefCardTypes");
                });

            modelBuilder.Entity("lab7.Models.RefCurrencyCodes", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("RefCurrencyCodes");
                });

            modelBuilder.Entity("lab7.Models.CardholdersBanks", b =>
                {
                    b.HasOne("lab7.Models.Bank", "Bank")
                        .WithMany("CardholdersBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab7.Models.Cardholder", "Cardholder")
                        .WithMany("Banks")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cardholder");
                });

            modelBuilder.Entity("lab7.Models.CardholdersCards", b =>
                {
                    b.HasOne("lab7.Models.RefCardTypes", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab7.Models.Cardholder", "Cardholder")
                        .WithMany("Cards")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab7.Models.RefCurrencyCodes", "Currency")
                        .WithMany("Cards")
                        .HasForeignKey("CurrencyCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");

                    b.Navigation("Cardholder");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("lab7.Models.FinancialTransaction", b =>
                {
                    b.HasOne("lab7.Models.ATMMachine", "ATM")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("ATMId1");

                    b.HasOne("lab7.Models.CardholdersCards", "Card")
                        .WithMany()
                        .HasForeignKey("CardNumber1");

                    b.HasOne("lab7.Models.RefCurrencyCodes", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyCode1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab7.Models.Merchant", "Merchant")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("MerchantId1");

                    b.Navigation("ATM");

                    b.Navigation("Card");

                    b.Navigation("Currency");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("lab7.Models.MerchantsBanks", b =>
                {
                    b.HasOne("lab7.Models.Bank", "Bank")
                        .WithMany("MerchantsBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab7.Models.Merchant", "Merchant")
                        .WithMany("MerchantsBanks")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("lab7.Models.ATMMachine", b =>
                {
                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("lab7.Models.Bank", b =>
                {
                    b.Navigation("CardholdersBanks");

                    b.Navigation("MerchantsBanks");
                });

            modelBuilder.Entity("lab7.Models.Cardholder", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Cards");
                });

            modelBuilder.Entity("lab7.Models.Merchant", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("MerchantsBanks");
                });

            modelBuilder.Entity("lab7.Models.RefCardTypes", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("lab7.Models.RefCurrencyCodes", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}

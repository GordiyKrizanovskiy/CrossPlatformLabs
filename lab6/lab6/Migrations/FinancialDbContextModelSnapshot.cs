// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace lab6.Migrations
{
    [DbContext(typeof(FinancialDbContext))]
    partial class FinancialDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Models.AtmMachine", b =>
                {
                    b.Property<int>("AtmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AtmId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AtmId");

                    b.ToTable("AtmMachines");
                });

            modelBuilder.Entity("Lab6.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Lab6.Models.Cardholder", b =>
                {
                    b.Property<int>("CardholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardholderId"));

                    b.Property<string>("AccountNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardholderId");

                    b.ToTable("Cardholders");
                });

            modelBuilder.Entity("Lab6.Models.CardholdersBanks", b =>
                {
                    b.Property<int>("CardholderBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardholderBankId"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CardholderId")
                        .HasColumnType("int");

                    b.HasKey("CardholderBankId");

                    b.HasIndex("BankId");

                    b.HasIndex("CardholderId");

                    b.ToTable("CardholdersBanks");
                });

            modelBuilder.Entity("Lab6.Models.CardholdersCards", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("CardholderId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.HasKey("CardNumber");

                    b.HasIndex("CardTypeCode");

                    b.HasIndex("CardholderId");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("CardholdersCards");
                });

            modelBuilder.Entity("Lab6.Models.FinancialTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int?>("AtmId")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionTypeCode")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AtmId");

                    b.HasIndex("CardNumber");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("MerchantId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("Lab6.Models.Merchant", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MerchantId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchantCategoryCode")
                        .HasColumnType("int");

                    b.HasKey("MerchantId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Lab6.Models.MerchantsBanks", b =>
                {
                    b.Property<int>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("MerchantBankId")
                        .HasColumnType("int");

                    b.HasKey("MerchantId", "BankId");

                    b.HasIndex("BankId");

                    b.ToTable("MerchantsBanks");
                });

            modelBuilder.Entity("Lab6.Models.RefCardType", b =>
                {
                    b.Property<int>("CardTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardTypeCode"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardTypeCode");

                    b.ToTable("RefCardTypes");
                });

            modelBuilder.Entity("Lab6.Models.RefCurrencyCode", b =>
                {
                    b.Property<int>("CurrencyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyCode"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("RefCurrencyCodes");
                });

            modelBuilder.Entity("Lab6.Models.CardholdersBanks", b =>
                {
                    b.HasOne("Lab6.Models.Bank", "Bank")
                        .WithMany("CardholdersBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Cardholder", "Cardholder")
                        .WithMany("Banks")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cardholder");
                });

            modelBuilder.Entity("Lab6.Models.CardholdersCards", b =>
                {
                    b.HasOne("Lab6.Models.RefCardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Cardholder", "Cardholder")
                        .WithMany("Cards")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefCurrencyCode", "Currency")
                        .WithMany("Cards")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");

                    b.Navigation("Cardholder");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Lab6.Models.FinancialTransaction", b =>
                {
                    b.HasOne("Lab6.Models.AtmMachine", "Atm")
                        .WithMany("Transactions")
                        .HasForeignKey("AtmId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lab6.Models.CardholdersCards", "Card")
                        .WithMany()
                        .HasForeignKey("CardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefCurrencyCode", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Merchant", "Merchant")
                        .WithMany("Transactions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Atm");

                    b.Navigation("Card");

                    b.Navigation("Currency");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Lab6.Models.MerchantsBanks", b =>
                {
                    b.HasOne("Lab6.Models.Bank", "Bank")
                        .WithMany("MerchantsBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Merchant", "Merchant")
                        .WithMany("MerchantsBanks")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Lab6.Models.AtmMachine", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Lab6.Models.Bank", b =>
                {
                    b.Navigation("CardholdersBanks");

                    b.Navigation("MerchantsBanks");
                });

            modelBuilder.Entity("Lab6.Models.Cardholder", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Lab6.Models.Merchant", b =>
                {
                    b.Navigation("MerchantsBanks");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Lab6.Models.RefCardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Lab6.Models.RefCurrencyCode", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
